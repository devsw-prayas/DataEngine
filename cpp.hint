// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define S_ENGINE_CLASS(name, implementation, nature, behavior, ordering) template<typename E> class name : public DataEngine<E>{ public: static constexpr Implementation engineImplementation = implementation; static constexpr Nature engineNature = nature; static constexpr Behavior engineBehavior = behavior; static constexpr Ordering engineOrder = ordering;
#define S_ABSTRACT_ENGINE_CLASS(name, nature, behavior, ordering) template<typename E> requires ValidConfiguration<ABSTRACTION_E, nature, behavior, ordering> class name : public DataEngine<E>, conditional_t<nature == THREAD_MUTABLE, Sortable<void>, Dummy> { public: ENGINE_CONSTANTS(ABSTRACTION_E, nature, behavior, ordering)
#define S_IMPLEMENTATION_CLASS(name, Abstraction, nature, behavior, ordering) template<typename E> requires ValidConfiguration<IMPLEMENTATION_E, nature, behavior, ordering> && ValidBase<Abstraction, E> class name : public Abstraction, conditional_t<(nature == THREAD_MUTABLE), Sortable<void>, Dummy> { public: ENGINE_CONSTANTS(IMPLEMENTATION_E, nature, behavior, ordering)
#define FUNCTIONAL_INTERFACE(name, functionName, flag) template<typename... Types> class name { public: virtual ~name() = default; name(const name&) = delete; name& operator=(const name&) = delete; name(const name&&) noexcept = delete; name& operator=(const name&&) noexcept = delete; virtual typename enable_t_if<flag, void> functionName(Types... args) = 0; virtual typename enable_t_if<!flag, void> functionName() = 0; protected: Sortable() = default; };
#define E_INTERFACE };
